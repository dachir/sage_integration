[
 {
  "allow_guest": 0,
  "api_method": "get_emp_shift",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2022-06-14 16:45:30.785023",
  "module": null,
  "name": "Get Employees Shift",
  "reference_doctype": null,
  "script": "frappe.response['message'] = frappe.db.sql(\r\n\t\"\"\"\r\n\t\tselect\r\n\t\t\t\tdistinct t3.employee, t3.log_type, t3.time\r\n\t\t\tfrom\r\n\t\t\t\t`tabEmployee` t1 LEFT JOIN  \r\n\t\t\t\t(SELECT *\r\n\t\t\t\t FROM `tabAttendance` \r\n\t\t\t\t WHERE attendance_date  = DATE_ADD(CURDATE(), INTERVAL -1 DAY)) t2 ON t1.name = t2.employee \r\n\t\t\t\t INNER JOIN `tabEmployee Checkin` t3 ON t1.name = t3.employee \r\n\t\t\twhere\r\n\t\t\t\tt2.employee IS NULL\r\n\t\t\t\tand t1.default_shift IS NULL\r\n\t\t\t\tand t1.status = 'Active'\r\n\t\t\t\tand  CAST(t3.time AS DATE)  = DATE_ADD(CURDATE(), INTERVAL -1 DAY)\r\n\t        \r\n\t\"\"\"\r\n\t,\r\n\tas_dict=True\r\n)",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "get_emp_shift_in",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2022-06-14 16:50:14.299761",
  "module": null,
  "name": "Get Employees Shift In Only",
  "reference_doctype": null,
  "script": "frappe.response['message'] = frappe.db.sql(\r\n\t\"\"\"\r\n\t\tselect\r\n\t\t\t\tdistinct t3.employee, t3.log_type, t3.time\r\n\t\t\tfrom\r\n\t\t\t\t`tabEmployee` t1 LEFT JOIN  \r\n\t\t\t\t(SELECT *\r\n\t\t\t\t FROM `tabAttendance` \r\n\t\t\t\t WHERE attendance_date  = DATE_ADD(CURDATE(), INTERVAL -1 DAY)) t2 ON t1.name = t2.employee \r\n\t\t\t\t INNER JOIN `tabEmployee Checkin` t3 ON t1.name = t3.employee \r\n\t\t\twhere\r\n\t\t\t\tt2.employee IS NULL\r\n\t\t\t\tand t1.default_shift IS NULL\r\n\t\t\t\tand t1.status = 'Active'\r\n\t\t\t\tand  CAST(t3.time AS DATE)  = DATE_ADD(CURDATE(), INTERVAL -1 DAY)\r\n\t\t\t\tand  t3.log_type = 'IN'\r\n\t        \r\n\t\"\"\"\r\n\t,\r\n\tas_dict=True\r\n)",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2022-06-16 23:13:59.910600",
  "module": null,
  "name": "Test2",
  "reference_doctype": "Employee Checkin",
  "script": "#frappe.msgprint(str(frappe.utils.get_datetime('2000-03-18 08:00:01')))\npunch = (doc.time).split(\" \")[1]\npunchdate = (doc.time).split(\" \")[0]\nhour = int(punch.split(\":\")[0])\nlog_type = doc.log_type\nshift_type = doc.shift\nmorningin = range(5,12)\nnightin = range(16,22)\nmorningout = range(16,23)\nnightout = range(7,12)\n\n\nshift_start_time_morning = ' 08:00:01'\nshift_start_morning =punchdate + shift_start_time_morning\nactual_shift_start_time_morning =' 06:00:00'\nactual_shift_start_morning =punchdate + actual_shift_start_time_morning\n\nshift_end_time_morning = ' 18:00:00'\nshift_end_morning = punchdate + shift_end_time_morning\nactual_shift_end_time_morning = ' 22:00:00'\nactual_shift_end_morning = punchdate + actual_shift_end_time_morning\n\nshift_start_time_night = ' 18:00:01'\nshift_start_night = punchdate + shift_start_time_night\nactual_shift_start_time_night = ' 16:00:00'\nactual_shift_start_night = punchdate + actual_shift_start_time_night\n\nshift_end_time_night = ' 08:00:00'\nshift_end_night = punchdate + shift_end_time_night\nactual_shift_end_time_night = ' 12:00:00'\nactual_shift_end_night = punchdate + actual_shift_end_time_night\n\n\n\nif log_type == 'IN' and hour in morningin and shift_type is None:\n    doc.shift = \"Morning\"\n    doc.shift_start = frappe.utils.get_datetime(shift_start_morning)\n    doc.shift_end = frappe.utils.get_datetime(shift_end_morning)\n    doc.shift_actual_start = frappe.utils.get_datetime(actual_shift_start_morning)\n    doc.shift_actual_end = frappe.utils.get_datetime(actual_shift_end_morning)\n    \n    \nelif log_type == 'IN' and hour in nightin and shift_type is None:\n    doc.shift = \"Night\"\n    doc.shift_start = frappe.utils.get_datetime(shift_start_night)\n    doc.shift_end = frappe.utils.get_datetime(shift_end_night)\n    doc.shift_actual_start = frappe.utils.get_datetime(actual_shift_start_night)\n    doc.shift_actual_end = frappe.utils.get_datetime(actual_shift_end_night)\n    \n    \nelif log_type == 'OUT' and hour in morningout and shift_type is None:\n    doc.shift = \"Morning\"\n    doc.shift_start = frappe.utils.get_datetime(shift_start_morning)\n    doc.shift_end = frappe.utils.get_datetime(shift_end_morning)\n    doc.shift_actual_start = frappe.utils.get_datetime(actual_shift_start_morning)\n    doc.shift_actual_end = frappe.utils.get_datetime(actual_shift_end_morning)\n    \n    \nelif log_type == 'OUT' and hour in nightout and shift_type is None:\n    doc.shift = \"Night\"\n    doc.shift_start = frappe.utils.add_to_date(frappe.utils.get_datetime(shift_start_night),days=-1) \n    doc.shift_end = frappe.utils.get_datetime(shift_end_night)\n    doc.shift_actual_start = frappe.utils.add_to_date(frappe.utils.get_datetime(actual_shift_start_night),days=-1)\n    doc.shift_actual_end = frappe.utils.get_datetime(actual_shift_end_night)\n    \n    \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "test_api",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2022-06-15 12:15:04.705177",
  "module": null,
  "name": "test3",
  "reference_doctype": null,
  "script": "frappe.response['message'] = frappe.db.sql(\r\n\t\"\"\"\r\n\t\tSELECT t.employee, Max(t.`IN`) AS `IN`, Max(t.`OUT`) AS `OUT`\r\n\t\tFROM(\r\n\t\tselect\r\n\t\t\t\tdistinct t3.employee, t3.time AS `IN`, NULL AS `OUT`\r\n\t\t\tfrom\r\n\t\t\t\t`tabEmployee` t1 LEFT JOIN  \r\n\t\t\t\t(SELECT *\r\n\t\t\t\t FROM `tabAttendance` \r\n\t\t\t\t WHERE attendance_date  = DATE_ADD(CURDATE(), INTERVAL -1 DAY)) t2 ON t1.name = t2.employee \r\n\t\t\t\t INNER JOIN `tabEmployee Checkin` t3 ON t1.name = t3.employee \r\n\t\t\twhere\r\n\t\t\t\tt2.employee IS NULL\r\n\t\t\t\tand t1.default_shift IS NULL\r\n\t\t\t\tand t1.status = 'Active'\r\n\t\t\t\tand  CAST(t3.time AS DATE)  = DATE_ADD(CURDATE(), INTERVAL -1 DAY)\r\n\t\t\t\tand  t3.log_type = 'IN'\r\n\t\tUNION\r\n\t\tselect\r\n\t\t\t\tdistinct t3.employee, NULL AS `IN`, t3.time AS `OUT`\r\n\t\t\tfrom\r\n\t\t\t\t`tabEmployee` t1 LEFT JOIN  \r\n\t\t\t\t(SELECT *\r\n\t\t\t\t FROM `tabAttendance` \r\n\t\t\t\t WHERE attendance_date  = DATE_ADD(CURDATE(), INTERVAL -1 DAY)) t2 ON t1.name = t2.employee \r\n\t\t\t\t INNER JOIN `tabEmployee Checkin` t3 ON t1.name = t3.employee \r\n\t\t\twhere\r\n\t\t\t\tt2.employee IS NULL\r\n\t\t\t\tand t1.default_shift IS NULL\r\n\t\t\t\tand t1.status = 'Active'\r\n\t\t\t\tand  ((CAST(t3.time AS DATE)  >= DATE_ADD(CURDATE(), INTERVAL -1 DAY)\r\n\t\t\t\tand TIME(t3.time) >= TIME('2009-05-18 12:00:57.005678'))\r\n\t\t\t\tor \r\n\t\t\t\t(CAST(t3.time AS DATE)  >= CURDATE()\r\n\t\t\t\tand TIME(t3.time) <= TIME('2009-05-18 12:00:57.005678'))\r\n\t\t\t\t)\r\n\t\t\t\tand  t3.log_type = 'OUT'\r\n\t    ) AS t\r\n\t    GROUP BY t.employee\r\n\t\"\"\"\r\n\t,\r\n\tas_dict=True\r\n)",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2022-06-16 23:42:48.442922",
  "module": null,
  "name": "shift-marking-for-loop",
  "reference_doctype": "Item",
  "script": "filters = {'name':'EMP-CKIN-06-2022-054605'}\nck_list = frappe.get_list('Employee Checkin', ['*'], filters=filters)\n\n#frappe.msgprint(str(ck_list))\n\nfor e in ck_list:\n    \n    \n    punch = (e.time).split(\" \")[1]\n    punchdate = (e.time).split(\" \")[0]\n    hour = int(punch.split(\":\")[0])\n    log_type = e.log_type\n    shift_type = e.shift\n    morningin = range(5,12)\n    nightin = range(16,22)\n    morningout = range(16,23)\n    nightout = range(7,12)\n    \n    \n    shift_start_time_morning = ' 08:00:01'\n    shift_start_morning =punchdate + shift_start_time_morning\n    actual_shift_start_time_morning =' 06:00:00'\n    actual_shift_start_morning =punchdate + actual_shift_start_time_morning\n    \n    shift_end_time_morning = ' 18:00:00'\n    shift_end_morning = punchdate + shift_end_time_morning\n    actual_shift_end_time_morning = ' 22:00:00'\n    actual_shift_end_morning = punchdate + actual_shift_end_time_morning\n    \n    shift_start_time_night = ' 18:00:01'\n    shift_start_night = punchdate + shift_start_time_night\n    actual_shift_start_time_night = ' 16:00:00'\n    actual_shift_start_night = punchdate + actual_shift_start_time_night\n    \n    shift_end_time_night = ' 08:00:00'\n    shift_end_night = punchdate + shift_end_time_night\n    actual_shift_end_time_night = ' 12:00:00'\n    actual_shift_end_night = punchdate + actual_shift_end_time_night\n    \n    \n    ck = frappe.get_doc('Employee Checkin', e.name)\n    if log_type == 'IN' and hour in morningin and shift_type is None:\n        ck.shift = 'Morning';\n    elif log_type == 'IN' and hour in nightin and shift_type is None:\n        ck.shift = 'Night';\n    elif log_type == 'OUT' and hour in morningout and shift_type is None:\n        ck.shift = 'Morning';\n    elif log_type == 'OUT' and hour in nightout and shift_type is None:\n        ck.shift = 'Night';\n  \n    \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2022-10-14 09:11:58.769247",
  "module": null,
  "name": "Conge Automatique",
  "reference_doctype": "Item",
  "script": "employees = frappe.db.get_list(doctype = \"Employee\", \n    fields = [\"name\",\"conge_days\",\"conge_days_5_years\",\"date_of_joining\",\"employee_category_details\"], \n    filters = {\"Status\" : \"Active\"}\n)\nfor e in employees : \n    date_join = frappe.utils.getdate(e.date_of_joining) \n    year_join = int(str(date_join)[:4])\n    next_5_years = year_join\n    today = frappe.utils.getdate()\n    year_today = int(frappe.utils.get_date_str(today)[:4])\n    diff = year_today - year_join\n    if (diff % 5) == 0 :\n        mois_join = str(date_join)[5:7]\n        mois_today = frappe.utils.get_date_str(today)[5:7]\n        if mois_join == mois_today : # todo utiliser date between plutot\n            employee = frappe.get_doc(\"Employee\", e.name)\n            #category = frappe.get_doc(\"Employee Category Details\",employee.employee_category_details)\n            conge_days_5_years = frappe.db.get_single_value(\"Custom Paie Settings\", \"conge_days_5_years\")\n            employee.conge_days_5_years = (diff // 5) * conge_days_5_years\n            employee.save()\n            #nb_jours = (diff // 5) * 2\n            #frappe.msgprint(str(conge_days_5_years))\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "get_employee_dependant2",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2022-11-15 12:57:34.702567",
  "module": null,
  "name": "Employee Depedant Management API",
  "reference_doctype": null,
  "script": "doc = frappe.get_doc('Employee','EMP0004')\n\nfrappe.response['message'] = doc",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "Daily",
  "modified": "2022-11-09 08:57:57.175740",
  "module": null,
  "name": "Last Attendance Sync Update",
  "reference_doctype": "Item",
  "script": "s = frappe.get_doc('Shift Type','Morning')\ns.last_sync_of_checkin =  frappe.utils.add_to_date(frappe.utils.today(), days=-1, as_string=True) + ' 23:59:59'\ns.save()\n\ns = frappe.get_doc('Shift Type','Night')\ns.last_sync_of_checkin =  frappe.utils.add_to_date(frappe.utils.today(), days=-3, as_string=True) + ' 23:59:59'\ns.save()\n",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2023-06-08 17:57:47.025824",
  "module": null,
  "name": "Set Account Sage Code",
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Material Issue\":\n    account = frappe.db.sql(\n    \t\t\"\"\"\n    \t\t\tSELECT a.name\n    \t\t\tFROM tabAccount a INNER JOIN `tabCode Compte Comptable` c ON c.sage_code = a.account_number\n    \t\t\tWhere c.web_service = %s\n    \t\t\"\"\",(doc.ws_code), as_dict = 1\n    )\n    \n    for e in doc.items:\n        e.expense_account = account[0].name",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2023-06-08 17:41:05.752730",
  "module": null,
  "name": "Set Details Branch and Cost center",
  "reference_doctype": "Material Request",
  "script": "for i in doc.items:\n    i.branch = doc.branch\n    i.cost_center = doc.cost_center",
  "script_type": "DocType Event"
 }
]